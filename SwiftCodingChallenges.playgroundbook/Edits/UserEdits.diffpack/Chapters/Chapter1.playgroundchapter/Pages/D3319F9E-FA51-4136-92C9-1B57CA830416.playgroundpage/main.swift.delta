<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>BaseFile</key>
	<string>Chapters/Chapter1.playgroundchapter/Pages/Template.playgroundpage/main.swift</string>
	<key>Diffs</key>
	<array>
		<dict>
			<key>ModifiedContent</key>
			<string>/*
 First Duplicate Index
 Technique: Frequency Counting (using Set)
 
 Write a function in Swift that takes an array of integers as input and returns the index of the first duplicate element in the array. If there are no duplicates, the function should return nil.
 
 For example:
 Input: [2, 3, 1, 4, 2, 7, 8]
 Output: 4 (The first duplicate element is 2, and its index is 4)
 
 Input: [5, 6, 8, 3, 9]
 Output: nil (No duplicates in the array)
 */

func firstDuplicateIndex(_ array: [Int]) -&gt; Int? {
    var seenNumbers: Set&lt;Int&gt; = []
    
    for (index, number) in array.enumerated() {
        if seenNumbers.contains(number) {
            return index
        } else {
            seenNumbers.insert(number)
        }
    }
    
    return nil
}

print(firstDuplicateIndex([2, 3, 1, 4, 2, 7, 8]))
print(firstDuplicateIndex([5, 6, 8, 3, 9]))

/*
 Time complexity: O(n)
 Space complexity: O(n)
 */
</string>
			<key>ModifiedRange</key>
			<string>{0, 901}</string>
			<key>OriginalContent</key>
			<string>
</string>
			<key>OriginalRange</key>
			<string>{0, 1}</string>
		</dict>
	</array>
	<key>FormatVersion</key>
	<integer>2</integer>
</dict>
</plist>
