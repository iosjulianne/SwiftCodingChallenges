<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>BaseFile</key>
	<string>Chapters/Chapter1.playgroundchapter/Pages/Template.playgroundpage/main.swift</string>
	<key>Diffs</key>
	<array>
		<dict>
			<key>ModifiedContent</key>
			<string>/*
 Single Numbers
 Technique: Frequency Counting/Counting Occurrences
 
 Given an array of integers, write a function to find the two elements that appear only once while all other elements appear exactly twice.
 
 Input: An array of integers nums where 1 &lt;= nums[i] &lt;= 1000. The length of the array is guaranteed to be even and at least 2.
 
 E.g.
 Input: [2, 4, 6, 2, 3, 6, 8, 4]
 Output: [3, 8]
 */

func singleNumbers(_ array: [Int]) -&gt; [Int] {
    var dict: [Int:Int] = [:]
    var newArray: [Int] = []
    
    for number in array {
        dict[number, default: 0] += 1
    }
    for (number, count) in dict {
        if count == 1 {
            newArray.append(number)
        }
    }
    return newArray
}

print(singleNumbers([2, 4, 6, 2, 3, 6, 8, 4]))

/*
 Time complexity: O(n)
 Space complexity: O(n) 
 
 Methods used: Dictionary default
 */

// A more space efficient solution uses XOR with space complexity of O(1). Same time complexity of O(n).
</string>
			<key>ModifiedRange</key>
			<string>{0, 962}</string>
			<key>OriginalContent</key>
			<string>
</string>
			<key>OriginalRange</key>
			<string>{0, 1}</string>
		</dict>
	</array>
	<key>FormatVersion</key>
	<integer>2</integer>
</dict>
</plist>
