<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>BaseFile</key>
	<string>Chapters/Chapter1.playgroundchapter/Pages/Template.playgroundpage/main.swift</string>
	<key>Diffs</key>
	<array>
		<dict>
			<key>ModifiedContent</key>
			<string>/**
 Fibonacci
 Technique: Memoization
 
 1. When a function is called with a specific set of inputs, the memoization technique first checks if the inputs are already present in the cache.
 2. If the inputs are found in the cache, the corresponding cached result is returned immediately instead of executing the function.
 3. If the inputs are not found in the cache, the function is executed as usual, and the result is calculated.
 4. Once the result is obtained, it is stored in the cache alongside the inputs for future reference.
 **/

// Create cache
var cache: [Int: Int] = [:]

func fibonacci(_ n: Int) -&gt; Int {
    // Check if answer is in cache
    if let result = cache[n] {
        return result
    }
    
    // For first two numbers, result is n
    if n &lt;= 1 {
        return n
    }
    
    // If answer is not in cache, run function to get answer and store answer in cache
    let result = fibonacci(n - 1) + fibonacci(n - 2)
    cache[n] = result
    
    return result
}

let result = fibonacci(7)
print(result)
</string>
			<key>ModifiedRange</key>
			<string>{1, 1033}</string>
			<key>OriginalContent</key>
			<string></string>
			<key>OriginalRange</key>
			<string>{1, 0}</string>
		</dict>
	</array>
	<key>FormatVersion</key>
	<integer>2</integer>
</dict>
</plist>
