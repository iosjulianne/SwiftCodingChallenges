<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>BaseFile</key>
	<string>Chapters/Chapter1.playgroundchapter/Pages/Template.playgroundpage/main.swift</string>
	<key>Diffs</key>
	<array>
		<dict>
			<key>ModifiedContent</key>
			<string>/*
 Maximum Sum Subarray
 Technique: Kadane's Algorithm
 
 Given an array of integers, find the contiguous subarray with the largest sum and return the sum of that subarray.
 
 Input: [-2, 1, -3, 4, -1, 2, 1, -5, 4]
 Output: 6 // The contiguous subarray with the largest sum is [4, -1, 2, 1], and the sum of this subarray is 6.
 
 1. Create var currentSum and var maxSum. Make sure initial values are the first element of the array instead of 0 in case all elements are negative (less than zero)
 2. Starting from the second element, iterate through the number array
 3. Compare the current sum to the next possible sum and keep the biggest
 4. Compare the current sum and max sum and keep the biggest
 5. Return max sum
 */
func maxSumSubarray(_ array: [Int]) -&gt; Int {
    var currentSum = array[0]
    var maxSum = array[0]
    
    for i in 1..&lt;array.count {
        currentSum = max(array[i], currentSum + array[i])
        maxSum = max(maxSum, currentSum)
    }
    return maxSum
}

print(maxSumSubarray([-2, 1, -3, 4, -1, 2, 1, -5, 4]))
print(maxSumSubarray([-2, -1, -2, -3, -1, -4, -1, -1]))
print(maxSumSubarray([1, 2, 3, -1, -4, -5, 2, 5]))

/*
 Time Complexity: O(n)
 Space Complexity: O(1)
 Methods used: max()
 */
</string>
			<key>ModifiedRange</key>
			<string>{0, 1226}</string>
			<key>OriginalContent</key>
			<string>
</string>
			<key>OriginalRange</key>
			<string>{0, 1}</string>
		</dict>
	</array>
	<key>FormatVersion</key>
	<integer>2</integer>
</dict>
</plist>
