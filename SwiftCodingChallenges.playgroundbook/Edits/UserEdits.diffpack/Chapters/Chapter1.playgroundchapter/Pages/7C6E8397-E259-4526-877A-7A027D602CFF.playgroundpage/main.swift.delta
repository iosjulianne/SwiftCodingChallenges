<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>BaseFile</key>
	<string>Chapters/Chapter1.playgroundchapter/Pages/Template.playgroundpage/main.swift</string>
	<key>Diffs</key>
	<array>
		<dict>
			<key>ModifiedContent</key>
			<string>/*
 Maximum Sum Subarray of Size K
 Technique: Sliding Window
 
 Given an array of integers and a positive integer k, find the maximum sum of any contiguous subarray of size k.
 
 For example, given the array [2, 1, 5, 1, 3, 2] and k = 3, the maximum sum subarray is [5, 1, 3] with a sum of 9.
 */

func maxSumSubarray(_ array: [Int], _ k: Int) -&gt; Int {
    var maxSum = 0
    
    // Calculate the initial sum of the first k elements
    for i in 0..&lt;k {
        maxSum += array[i]
    }
    
    var windowSum = maxSum
    
    // Slide the window through the array and update maxSum
    for i in k..&lt;array.count {
        windowSum += array[i] - array[i - k]
        maxSum = max(maxSum, windowSum)
    }
    
    return maxSum
}

let array = [2, 1, 5, 1, 3, 2]
let k = 3
let result = maxSumSubarray(array, k)
print(result) // Output will be the maximum sum subarray of size k
</string>
			<key>ModifiedRange</key>
			<string>{0, 880}</string>
			<key>OriginalContent</key>
			<string></string>
			<key>OriginalRange</key>
			<string>{0, 0}</string>
		</dict>
	</array>
	<key>FormatVersion</key>
	<integer>2</integer>
</dict>
</plist>
