<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>BaseFile</key>
	<string>Chapters/Chapter1.playgroundchapter/Pages/Template.playgroundpage/main.swift</string>
	<key>Diffs</key>
	<array>
		<dict>
			<key>ModifiedContent</key>
			<string>/*
 Given a sorted array of integers, find the first and last occurrence of a target value. If the target is not found in the array, return [-1, -1].
 Technique: Binary Search
 
 let nums = [5, 7, 7, 8, 8, 10]
 let target = 8
 let result = searchRange(nums, target) // Output: [3, 4]
 
 Your solution should have a time complexity of O(log n).
 */

func searchRange(_ nums: [Int], _ target: Int) -&gt; [Int] {
    var left = findFirstOccurrence(nums, target)
    var right = findLastOccurrence(nums, target)
    
    if left &gt; right {
        return [-1, -1]
    }
    
    return [left, right]
}

func findFirstOccurrence(_ nums: [Int], _ target: Int) -&gt; Int {
    var minIndex = 0
    var maxIndex = nums.count - 1
    var result = -1 //serves as a sentinel value that indicates that the target element was not found in the array
    
    while minIndex &lt;= maxIndex {
        let midIndex = minIndex + (maxIndex - minIndex) / 2
        
        if nums[midIndex] == target {
            result = midIndex
            maxIndex = midIndex - 1
        } else if nums[midIndex] &lt; target {
            minIndex = midIndex + 1
        } else {
            maxIndex = midIndex - 1
        }
    }
    
    return result
}

func findLastOccurrence(_ nums: [Int], _ target: Int) -&gt; Int {
    var minIndex = 0
    var maxIndex = nums.count - 1
    var result = -1
    
    while minIndex &lt;= maxIndex {
        let midIndex = minIndex + (maxIndex - minIndex) / 2
        
        if nums[midIndex] == target {
            result = midIndex
            minIndex = midIndex + 1
        } else if nums[midIndex] &lt; target {
            minIndex = midIndex + 1
        } else {
            maxIndex = midIndex - 1
        }
    }
    
    return result
}

print(searchRange([5, 7, 7, 8, 8, 10], 8))
print(searchRange([1, 3, 3, 3, 4, 5, 5, 6, 7, 7, 7, 7, 8, 8, 9, 10, 11, 13, 15, 21], 7))

/*
 Time complexity: O(log n)
 Space complexity: O(1)
 */
</string>
			<key>ModifiedRange</key>
			<string>{0, 1930}</string>
			<key>OriginalContent</key>
			<string>
</string>
			<key>OriginalRange</key>
			<string>{0, 1}</string>
		</dict>
	</array>
	<key>FormatVersion</key>
	<integer>2</integer>
</dict>
</plist>
