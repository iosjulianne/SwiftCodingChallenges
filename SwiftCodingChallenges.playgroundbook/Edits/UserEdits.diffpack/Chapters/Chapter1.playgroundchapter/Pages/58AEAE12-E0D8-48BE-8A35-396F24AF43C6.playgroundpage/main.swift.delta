<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>BaseFile</key>
	<string>Chapters/Chapter1.playgroundchapter/Pages/Template.playgroundpage/main.swift</string>
	<key>Diffs</key>
	<array>
		<dict>
			<key>ModifiedContent</key>
			<string>/**
 Find Unique Numbers
 
 Given an array of integers, write a function to find the two numbers that appear only once in the array. All other numbers in the array appear exactly twice. The function should return an array containing the two unique numbers in any order.
 
 For example:
 Input: [2, 4, 6, 8, 10, 2, 4, 5, 8, 5]
 Output: [6, 10]
 **/

func findUniqueNumbers(_ array: [Int]) -&gt; [Int] {
    var numberCountDictionary: [Int: Int] = [:]
    
    // Count the occurrences of each number
    for number in array {
        numberCountDictionary[number, default: 0] += 1
    }
    
    // Filter out the numbers with count equal to 1
    let uniqueNumbers = numberCountDictionary.filter { $0.value == 1 }.map { $0.key }
    
    return uniqueNumbers
}

print(findUniqueNumbers([2, 4, 6, 8, 10, 2, 4, 5, 8, 5]))

/**
 Time complexity: O(n)
 Space complexity: O(n)
 **/


// A more space efficient solution uses XOR with space complexity of 1. Same time complexity of O(n).
</string>
			<key>ModifiedRange</key>
			<string>{0, 978}</string>
			<key>OriginalContent</key>
			<string>
</string>
			<key>OriginalRange</key>
			<string>{0, 1}</string>
		</dict>
	</array>
	<key>FormatVersion</key>
	<integer>2</integer>
</dict>
</plist>
